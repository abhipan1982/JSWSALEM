@model PE.HMIWWW.ViewModel.Module.Lite.RollsetDisplay.VM_RollsetDisplay
@{
    Layout = "~/Views/Shared/_PopupLayout.cshtml";
}

<style>
    .h_dotted_ln {
        border-bottom: 1px dashed black;
        width: 100%;
    }

    .h_dotted_right_ln {
        border-right: 1px solid rgba(0,0,0,.1);
    }

    .h_blank_ln {
        width: 100%;
        height: 20px;
    }

    .v_blank_ln {
        width: 20px;
    }

    /*.table-roll-details tr td {
                        border: 1px solid black;
                }*/

    .table-roll-details label {
        font-weight: bold;
        font-style: normal;
    }

    .table-roll-details td {
        font-weight: normal;
        font-style: italic;
    }

    .roll {
        position: relative;
    }

    .number {
        position: absolute;
        left: 50%;
        top: 50%;
        font-size: 24px;
        color: #000;
        transform: translate(-50%,-50%);
        opacity: 0.8;
        z-index: 1;
    }
</style>


@if (Model != null && @ViewData.ModelState.IsValid)
{
    <script>
        $(document).ready(function () {
            var rollCnt = @Model.GrooveActualRollUpper.Count() + 3;
            var rowCnt = 15;
            var mainWidth = 380  + (rollCnt - 3) * 140;
            var mainHeight = 650;
            ChangePopupSize(mainWidth);
        })
    </script>
}
@{
    int rollCnt = Model.GrooveActualRollUpper.Count() + 3;
    int rowCnt = 15;
    int mainWidth = 380 + (rollCnt - 3) * 140;

    int mainHeight = 650;
}

<form asp-controller="GrindingTurning" asp-action="ConfigRollSetSubmit" data-ajax="true" data-ajax-method="POST"
      data-ajax-begin="OnFormBegin" data-ajax-success="OnFormSuccess" data-ajax-failure="OnFormError"
      class="container-fluid" target="formContainer" role="form" id="form">
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.RollSetId)
    @Html.HiddenFor(m => m.RollSetName)
    @Html.HiddenFor(m => m.BottomActualDiameter)
    @Html.HiddenFor(m => m.UpperActualDiameter)
    @Html.HiddenFor(m => m.UpperRollName)
    @Html.HiddenFor(m => m.BottomRollName)
    @Html.HiddenFor(m => m.UpperRollId)
    @Html.HiddenFor(m => m.BottomRollId)
    @{
        int j = 0;
    }
    for (j = 0; j < Model.GrooveActualRollBottom.Count(); j++)
    {
    @Html.HiddenFor(m => m.GrooveActualRollBottom[j].AccBilletCnt);
    @Html.HiddenFor(m => m.GrooveActualRollBottom[j].GrooveTemplateName);
    @Html.HiddenFor(m => m.GrooveActualRollBottom[j].GrooveTemplateId);
    @Html.HiddenFor(m => m.GrooveActualRollBottom[j].GrooveConfirmed);
    @Html.HiddenFor(m => m.GrooveActualRollBottom[j].GrooveShortName);
    }
    for (j = 0; j < Model.GrooveActualRollUpper.Count(); j++)
    {
    @Html.HiddenFor(m => m.GrooveActualRollUpper[j].GrooveTemplateName);
    @Html.HiddenFor(m => m.GrooveActualRollUpper[j].GrooveConfirmed);
    @Html.HiddenFor(m => m.GrooveActualRollUpper[j].GrooveShortName);
    }

    <div style="width:@(mainWidth);height:@(mainHeight);">
        @* Upper Roll*@
        <table cellspacing="0" cellpadding="0" border="0" class="table-roll-details">
            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.RollSetName))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="left">@Html.DisplayFor(m => m.RollSetName)</td>
                <td rowspan="@(rowCnt)"><div class="v_blank_ln"></div></td>
            </tr>
            <tr>
            </tr>
            <tr>
                <td colspan="@(rollCnt + 1)"><div class="h_blank_ln"></div></td>
            </tr>
            <tr>
                <td align="left"></td>
                <td><div class="v_blank_ln"></div></td>
                <td align="center"><img src="~/Content/System/img/roll-profille-left.png"></td>

                @{
                    int grooveNumber = 1;
                    string grooveNumberStr = "";

                    foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
                    {

                        if (grooveNumber < 10)
                        {
                            grooveNumberStr = "0" + grooveNumber.ToString();
                        }
                        else
                        {
                            grooveNumberStr = grooveNumber.ToString();
                        }

                        <td align="center" class="roll"><div class="number">@grooveNumberStr</div><img src="~/Content/System/img/roll-profille-rd60.png"></td>

                        grooveNumber++;
                    }
                }
                <td align="center"><img src="~/Content/System/img/roll-profille-right.png"></td>
            </tr>
            <tr>
                <td colspan="@(rollCnt + 1)"><div class="h_blank_ln"></div></td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.UpperRollName))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="center">@Html.DisplayFor(m => m.UpperRollName)</td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.UpperActualDiameter))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="center">@Html.DisplayFor(m => m.UpperActualDiameter)</td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.GrooveTemplateName))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{
                    foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
                    {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.GrooveTemplateName)</td>
                    }
                }
                <td></td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccWeightLabel))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{
                    foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
                    {
                        if (rollUpper.AccWeight > rollUpper.AccWeightLimit)
                        {
                            <td align="center" class="h_dotted_right_ln" style="background-color:red">@Html.DisplayFor(m => rollUpper.AccWeight)</td>
                        }
                        else
                        {
                            <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.AccWeight)</td>
                        }
                    }
                }
                <td></td>
            </tr>
            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccWeightLimitLabel))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{
                    foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
                    {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.AccWeightLimit)</td>
                    }
                }
                <td></td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccBilletCntLabel))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{
                    foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
                    {
                        if (rollUpper.AccBilletCnt > rollUpper.AccBilletCntLimit)
                        {
                            <td align="center" class="h_dotted_right_ln" style="background-color:red">@Html.DisplayFor(m => rollUpper.AccBilletCnt)</td>
                        }
                        else
                        {
                            <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.AccBilletCnt)</td>
                        }
                    }
                }

            </tr>
            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccBilletCntLimitLabel))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{
                    foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
                    {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.AccBilletCntLimit)</td>
                    }
                }

            </tr>

            <tr>
                <td colspan="@(rollCnt + 1)"><div class="h_blank_ln"></div></td>
            </tr>

            <tr>
                @* Bottom Roll*@
                <td align="left"><label>@(Html.LabelFor(m => m.BottomRollName))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="center">@Html.DisplayFor(m => m.BottomRollName)</td>
            </tr>
            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.BottomActualDiameter))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td colspan="@(rollCnt)" align="center">@Html.DisplayFor(m => m.BottomActualDiameter)</td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.GrooveTemplateName))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                @{
                    foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollBottom in Model.GrooveActualRollBottom)
                    {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollBottom.GrooveTemplateName)</td>
                    }
                }
                <td></td>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccWeightLabel))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                    @{
                        foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollBottom in Model.GrooveActualRollBottom)
                        {
                            if (rollBottom.AccWeight > rollBottom.AccWeightLimit)
                            {
                            <td align="center" class="h_dotted_right_ln" style="background-color:red">@Html.DisplayFor(m => rollBottom.AccWeight)</td>
                            }
                            else
                            {
                            <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollBottom.AccWeight)</td>
                            }
                        }
                    }
                <td></td>
            </tr>
            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccWeightLimitLabel))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                    @{
                        foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollBottom in Model.GrooveActualRollBottom)
                        {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollBottom.AccWeightLimit)</td>
                        }
                    }
                <td></td>
            </tr>

            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccBilletCntLabel))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                    @{
                        foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollBottom in Model.GrooveActualRollBottom)
                        {
                            if (rollBottom.AccBilletCnt > rollBottom.AccBilletCntLimit)
                            {
                            <td align="center" class="h_dotted_right_ln" style="background-color:red">@Html.DisplayFor(m => rollBottom.AccBilletCnt)</td>
                            }
                            else
                            {
                            <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollBottom.AccBilletCnt)</td>
                            }

                        }
                    }
                <td></td>
            </tr>
            <tr>
                <td align="left"><label>@(Html.LabelFor(m => m.AccBilletCntLimitLabel))</label></td>
                <td><div class="v_blank_ln"></div></td>
                <td class="h_dotted_right_ln"></td>
                    @{
                        foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollBottom in Model.GrooveActualRollBottom)
                        {
                        <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollBottom.AccBilletCntLimit)</td>
                        }
                    }
                <td></td>
            </tr>
        </table>
        <br />

    </div>
</form>


<script>
    function ChangePopupSize(mainWidth) {
      $(".popup_content").width(mainWidth);
    }
</script>
