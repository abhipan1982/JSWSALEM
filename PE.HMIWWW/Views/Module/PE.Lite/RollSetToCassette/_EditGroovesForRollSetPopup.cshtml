@model PE.HMIWWW.ViewModel.Module.Lite.RollsetDisplay.VM_RollsetDisplay
@{
  Layout = "~/Views/Shared/_PopupLayout.cshtml";
}
<style>
  .h_dotted_ln {
      border-bottom: 1px dashed black;
      width: 100%;
  }

  .h_dotted_right_ln {
      border-right: 1px solid rgba(0,0,0,.1);
  }

  .h_blank_ln {
      width: 100%;
      height: 20px;
  }

  .v_blank_ln {
      width: 20px;
  }

  .table-roll-details label {
      font-weight: bold;
      font-style: normal;
  }

  .table-roll-details td {
      font-weight: normal;
      font-style: italic;
  }

  .horizontal-scroll-except-first-column {
      width: 100%;
      overflow: auto;
      padding-bottom: 10px;
  }

      .horizontal-scroll-except-first-column > table {
          margin-left: 200px;
      }

          .horizontal-scroll-except-first-column > table > * > tr > th:first-child,
          .horizontal-scroll-except-first-column > table > * > tr > td:first-child {
              position: absolute;
              width: 200px;
              margin-left: -200px;
              background: white;
              z-index: 100;
          }

          .horizontal-scroll-except-first-column > table > * > tr > th,
          .horizontal-scroll-except-first-column > table > * > tr > td {
              /* Without this, if a cell wraps onto two lines, the first column
                                  * will look bad, and may need padding.
                                        white-space: nowrap; */
          }

              .horizontal-scroll-except-first-column > table > * > tr > th:first-child {
                  height: 3.7rem;
              }


  .last-desc {
      height: 3.2rem !important;
  }

  .roll {
      position: relative;
  }

  .number {
      position: absolute;
      left: 50%;
      top: 50%;
      font-size: 24px;
      color: #000;
      transform: translate(-50%,-50%);
      opacity: 0.8;
      z-index: 1;
  }

  .header-row {
      position: relative;
      height: 25px;
  }

  .header-row-input {
      position: relative;
      height: 32px;
  }

  .header-data {
      position: absolute;
      margin-left: 2px;
  }

  .header-input {
      display: flex;
      flex-direction: row;
      position: absolute;
      margin-left: 2px;
  }

  th label {
      color: #00587c;
      font-weight: 500;
      font-size: 14px;
  }

  .section {
      color: #6d8292;
      font-weight: 500;
      font-size: 14px;
  }

  div.popupContainer > .container {
      max-height: none;
  }
</style>

<script>
  function onLimitValueChange(e) {
    var limit = parseInt($(this.element).attr("data-limit")) || 0;

    if (this.value() > limit) {
      this.element.css('background-color', 'lightpink');
      this.element.prev().css('background-color', 'lightpink');
    }
    else {
      this.element.css('background-color', 'white');
      this.element.prev().css('background-color', 'white');
    }
  }

  $(document).ready(function () {
    $('input:checkbox:not(.disabled)').on('click', function () {
      $('input:checkbox').prop('checked', false);
      $('input:checkbox').removeClass('disabled');

      $(this).prop('checked', true);
      $(this).addClass('disabled');
    })
  })
</script>

<form asp-controller="RollsetToCassette" asp-action="EditGroovesForRollSet" ," data-ajax="true" data-ajax-method="POST"
      data-ajax-begin="OnFormBegin" data-ajax-success="OnFormSuccess" data-ajax-failure="OnFormError"
      class="container-fluid" target="formContainer" role="form" id="form">
  @Html.AntiForgeryToken()
  @Html.HiddenFor(model => model.RollSetId)
  @Html.HiddenFor(m => m.UpperRollId)
  @Html.HiddenFor(m => m.BottomRollId)
  @{
    int i = 0;
    int k = 0;
    int colspanSize = Model.GrooveActualRollUpper.Count() + 2;
  }
  @for (i = 0; i < Model.GrooveActualRollBottom.Count(); i++)
  {
    int j = i;
    Html.HiddenFor(m => m.GrooveActualRollBottom[j].GrooveTemplateId);
  }
  @for (i = 0; i < Model.GrooveActualRollUpper.Count(); i++)
  {
    int j = i;
    Html.HiddenFor(m => m.GrooveActualRollUpper[j].GrooveTemplateId);
  }

  <style>
    .scale {
        transform: scale(1);
    }
  </style>

  <div class="horizontal-scroll-except-first-column">
    <table id="css-div">
      <tbody>
        @* UPPER ROLL BEGIN*@
        <tr>
          <th class="section">@VM_Resources.NAME_RollName</th>
          <td colspan="@(colspanSize)"><hr /></td>
        </tr>
        <tr class="header-row">
          <th style="min-width:200px;">@Html.LabelFor(m => m.UpperRollName)</th>
          <td colspan="@(colspanSize)" class="header-data">@Html.DisplayFor(m => m.UpperRollName)</td>
        </tr>
        <tr class="header-row">
          <th>@Html.LabelFor(m => m.UpperActualDiameter)</th>
          <td colspan="@(colspanSize)" class="header-data">@Html.DisplayFor(m => m.UpperActualDiameter)</td>
        </tr>

        <tr class="header-row">
          <th>@Html.LabelFor(m => m.BottomRollName)</th>
          <td colspan="@(colspanSize)" class="header-data">@Html.DisplayFor(m => m.BottomRollName)</td>
        </tr>
        <tr class="header-row">
          <th>@Html.LabelFor(m => m.BottomActualDiameter)</th>
          <td colspan="@(colspanSize)" class="header-data">@Html.DisplayFor(m => m.BottomActualDiameter)</td>
        </tr>

        <tr>
          <th class="section">@VM_Resources.PAGE_TITLE_Limit_Index</th>
          <td colspan="@(colspanSize)"><hr /></td>
        </tr>

        <tr>
          <th>@Html.LabelFor(m => m.AccWeightLimitLabel)</th>
          <td></td>
          @foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
          {
            <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.AccWeightLimit)</td>
          }
          <td></td>
        </tr>
        <tr>
          <th>@Html.LabelFor(m => m.AccBilletCntLimitLabel)</th>
          <td></td>
          @foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
          {
            <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.AccBilletCntLimit)</td>
          }
          <td></td>
        </tr>

        <tr>
          <th>@Html.LabelFor(m => m.AccWeightLabel)</th>
          <td></td>
          @for (k = 0; k < Model.GrooveActualRollUpper.Count; k++)
          {
            int j = k;
            <td align="center" class="h_dotted_right_ln">
              @(Html.Kendo().NumericTextBoxFor(m => m.GrooveActualRollUpper[j].AccWeight).Enable(true)
            .HtmlAttributes(new { style = "width:100px; background-color: "
            + (Model.GrooveActualRollUpper[j].AccWeight > Model.GrooveActualRollUpper[j].AccWeightLimit ? "lightpink" : "white"),
            data_limit = Model.GrooveActualRollUpper[j].AccWeightLimit })
            .Events(ev => ev.Change("onLimitValueChange").Spin("onLimitValueChange")))
              @Html.ValidationMessageFor(m => m.GrooveActualRollUpper[j].AccWeight)
            </td>
          }
          <td></td>
        </tr>
        <tr>
          <th>@Html.LabelFor(m => m.AccWeightWithCoeffLabel)</th>
          <td></td>
          @for (k = 0; k < Model.GrooveActualRollUpper.Count; k++)
          {
            int j = k;
            <td align="center" class="h_dotted_right_ln">
              @(Html.Kendo().NumericTextBoxFor(m => m.GrooveActualRollUpper[j].AccWeightWithCoeff).Enable(true)
            .HtmlAttributes(new { style = "width:100px; background-color: "
            + (Model.GrooveActualRollUpper[j].AccWeightWithCoeff > Model.GrooveActualRollUpper[j].AccWeightLimit ? "lightpink" : "white"),
            data_limit = Model.GrooveActualRollUpper[j].AccWeightLimit })
            .Events(ev => ev.Change("onLimitValueChange").Spin("onLimitValueChange")))
              @Html.ValidationMessageFor(m => m.GrooveActualRollUpper[j].AccWeightWithCoeff)
            </td>
          }
        </tr>
        <tr>
          <th>@Html.LabelFor(m => m.AccBilletCntLabel)</th>
          <td></td>
          @for (k = 0; k < Model.GrooveActualRollUpper.Count; k++)
          {
            int j = k;
            <td align="center" class="h_dotted_right_ln">
              @(Html.Kendo().NumericTextBoxFor(m => m.GrooveActualRollUpper[j].AccBilletCnt).Enable(true)
            .HtmlAttributes(new { style = "width:100px; background-color: "
            + (Model.GrooveActualRollUpper[j].AccBilletCnt > Model.GrooveActualRollUpper[j].AccBilletCntLimit ? "lightpink" : "white"),
            data_limit = Model.GrooveActualRollUpper[j].AccBilletCntLimit })
            .Events(ev => ev.Change("onLimitValueChange").Spin("onLimitValueChange")).Format("#"))
              @Html.ValidationMessageFor(m => m.GrooveActualRollUpper[j].AccBilletCnt)
            </td>
          }
          <td></td>
        </tr>

        <tr>
          <th><hr /></th>
          <td colspan="@(colspanSize)"><hr /></td>
        </tr>
        @* UPPER ROLL END *@
        <tr>
          <th style="height:150px;"></th>
          <td align="center"><img class="scale" src="~/css/System/img/roll-profille-left.png"></td>
          @{
            int grooveNumber = 1;
            string grooveNumberStr = "";
            foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper.OrderBy(z => z.GrooveNumber))
            {

              if (grooveNumber < 10)
              {
                grooveNumberStr = "0" + grooveNumber.ToString();
              }
              else
              {
                grooveNumberStr = grooveNumber.ToString();
              }

              if (rollUpper.GrooveShortName == "Flat")
              {
                if (rollUpper.EnumGrooveSetting == 1)
                {
                  <td align="center" class="roll"><div class="number">@grooveNumberStr</div><img class="scale" src="~/css/System/img/roll-profille-full-1.png"></td>
                }
                else if (rollUpper.EnumGrooveSetting == 2)
                {
                  <td align="center" class="roll"><div class="number">@grooveNumberStr</div><img class="scale" src="~/css/System/img/roll-profille-full-2.png"></td>
                }
                else if (rollUpper.EnumGrooveSetting == 3)
                {
                  <td align="center" class="roll"><div class="number">@grooveNumberStr</div><img class="scale" src="~/css/System/img/roll-profille-full-3.png"></td>
                }
                else
                {
                  <td align="center" class="roll"><div class="number">@grooveNumberStr</div><img class="scale" src="~/css/System/img/roll-profille-full.png"></td>
                }
              }
              else
              {
                if (rollUpper.EnumGrooveSetting == 1)
                {
                  <td align="center" class="roll"><div class="number">@grooveNumberStr</div><img class="scale" src="~/css/System/img/roll-profille-rd60-1.png"></td>
                }
                else if (rollUpper.EnumGrooveSetting == 2)
                {
                  <td align="center" class="roll"><div class="number">@grooveNumberStr</div><img class="scale" src="~/css/System/img/roll-profille-rd60-2.png"></td>
                }
                else if (rollUpper.EnumGrooveSetting == 3)
                {
                  <td align="center" class="roll"><div class="number">@grooveNumberStr</div><img class="scale" src="~/css/System/img/roll-profille-rd60-3.png"></td>
                }
                else
                {
                  <td align="center" class="roll"><div class="number">@grooveNumberStr</div><img class="scale" src="~/css/System/img/roll-profille-rd60.png"></td>
                }
              }
              grooveNumber++;
            }
          }
          <td align="center"><img class="scale" src="~/css/System/img/roll-profille-right.png"></td>
        </tr>
        <tr>
          <th>@Html.LabelFor(m => m.GrooveTemplateName)</th>
          <td></td>
          @{
            foreach (PE.HMIWWW.ViewModel.Module.VM_GroovesRoll rollUpper in Model.GrooveActualRollUpper)
            {
              <td align="center" class="h_dotted_right_ln">@Html.DisplayFor(m => rollUpper.GrooveTemplateName)</td>
            }
          }
          <td></td>
        </tr>
        <tr>
          <th><label>@VM_Resources.NAME_Remark</label></th>
          <td></td>
          @{
            int c;
            for (c = 0; c < Model.GrooveActualRollUpper.Count; c++)
            {
              int a = c;
              <td align="center" class="h_dotted_right_ln">
                @Html.Kendo().TextBoxFor(m => m.GrooveActualRollUpper[a].GrooveRemark).Enable(true).HtmlAttributes(new { style = "width:100px" })
                @Html.ValidationMessageFor(m => m.GrooveActualRollUpper[a].GrooveRemark)
              </td>
            }
          }
        </tr>
        <tr style="height:2vh"></tr>
      </tbody>
    </table>
  </div>

  <hr />
  <div class="row form-group">
    <div class="col invalid">
      <p id="error">
        <span class="k-icon k-i-close-circle error-icon"></span> @VM_Resources.GLOB_Error
      </p>
    </div>
    <div class="col text-right">
      <input type="submit" class="btn btn-primary popup_button" value="@PE.HMIWWW.Core.Resources.VM_Resources.GLOB_Form_Button_Save" />
    </div>
  </div>

</form>

<script>

  $(function () {
    $("#form").kendoValidator().data("kendoValidator");
  });

</script>
