






// 
// This code was generated by EnumClassesGenerator tool. Any changes made manually will be lost
// the next time this code is regenerated.
// szymon.franczyk@primetals.com
// 
// Generated at: 11/08/2023 11:43:46
//
using System;
using SMF.DbEntity.EnumClasses;
using PE.BaseDbEntity.EnumClasses;
namespace PE.DbEntity.EnumClasses
//[SF] Connection string: Server=inccun009dbs;Database=PE_JSWSalem;Trusted_Connection=false;User Id=sa;Password=Primetals1234;

{
    [Serializable]
    public class TransferTableDataReadingStatus : GenericEnumType<short>
    {

        protected TransferTableDataReadingStatus(short value, string name) : base(value, name)
        {
        }

        public override string ToString() => $"TransferTableDataReadingStatus({Name})";
        public override TypeCode GetTypeCode() => TypeCode.Int16;
        public override short ToInt16(IFormatProvider provider) => this.Value;

        public static implicit operator short(TransferTableDataReadingStatus obj) => obj != null ? obj.Value : (short) 0;

        public static explicit operator TransferTableDataReadingStatus(short input) => GetValue(input);

        public override bool Equals(object obj)
        {
            if (obj is TransferTableDataReadingStatus other)
            {
                return other.Value == this.Value;
            }

            return false;
        }
        public static bool operator ==(TransferTableDataReadingStatus obj1, TransferTableDataReadingStatus obj2)
        {
            if (ReferenceEquals(obj1, obj2))
            {
                return true;
            }
            if (ReferenceEquals(obj1, null))
            {
                return false;
            }
            if (ReferenceEquals(obj2, null))
            {
                return false;
            }

            return obj1.Equals(obj2);
        }

        public static bool operator !=(TransferTableDataReadingStatus obj1, TransferTableDataReadingStatus obj2) => !(obj1 == obj2);

        public static bool operator ==(short obj1, TransferTableDataReadingStatus obj2)
        {
            if (ReferenceEquals(obj2, null))
            {
                return false;
            }

            return obj1 == obj2.Value;
        }

        public static bool operator !=(short obj1, TransferTableDataReadingStatus obj2) => !(obj1 == obj2);

        public static bool operator ==(TransferTableDataReadingStatus obj1, short obj2) => obj2 == obj1;

        public static bool operator !=(TransferTableDataReadingStatus obj1, short obj2) => !(obj1 == obj2);

        public override int GetHashCode() => base.GetHashCode();

        public static TransferTableDataReadingStatus GetValue(short input)
        {
            switch(input)
            {
                default: throw new ArgumentOutOfRangeException(input.ToString());
            }
        }
    }

    [Serializable]
    public class ProcessingMessageStatus : GenericEnumType<short>
    {

        protected ProcessingMessageStatus(short value, string name) : base(value, name)
        {
        }

        public override string ToString() => $"ProcessingMessageStatus({Name})";
        public override TypeCode GetTypeCode() => TypeCode.Int16;
        public override short ToInt16(IFormatProvider provider) => this.Value;

        public static implicit operator short(ProcessingMessageStatus obj) => obj != null ? obj.Value : (short) 0;

        public static explicit operator ProcessingMessageStatus(short input) => GetValue(input);

        public override bool Equals(object obj)
        {
            if (obj is ProcessingMessageStatus other)
            {
                return other.Value == this.Value;
            }

            return false;
        }
        public static bool operator ==(ProcessingMessageStatus obj1, ProcessingMessageStatus obj2)
        {
            if (ReferenceEquals(obj1, obj2))
            {
                return true;
            }
            if (ReferenceEquals(obj1, null))
            {
                return false;
            }
            if (ReferenceEquals(obj2, null))
            {
                return false;
            }

            return obj1.Equals(obj2);
        }

        public static bool operator !=(ProcessingMessageStatus obj1, ProcessingMessageStatus obj2) => !(obj1 == obj2);

        public static bool operator ==(short obj1, ProcessingMessageStatus obj2)
        {
            if (ReferenceEquals(obj2, null))
            {
                return false;
            }

            return obj1 == obj2.Value;
        }

        public static bool operator !=(short obj1, ProcessingMessageStatus obj2) => !(obj1 == obj2);

        public static bool operator ==(ProcessingMessageStatus obj1, short obj2) => obj2 == obj1;

        public static bool operator !=(ProcessingMessageStatus obj1, short obj2) => !(obj1 == obj2);

        public override int GetHashCode() => base.GetHashCode();

        public static ProcessingMessageStatus GetValue(short input)
        {
            switch(input)
            {
                default: throw new ArgumentOutOfRangeException(input.ToString());
            }
        }
    }

    [Serializable]
    public class TestCustom : GenericEnumType<short>
    {
        public static readonly TestCustom Test1 = new TestCustom(0, "Test1");
        public static readonly TestCustom Test2 = new TestCustom(1, "Test2");

        protected TestCustom(short value, string name) : base(value, name)
        {
        }

        public override string ToString() => $"TestCustom({Name})";
        public override TypeCode GetTypeCode() => TypeCode.Int16;
        public override short ToInt16(IFormatProvider provider) => this.Value;

        public static implicit operator short(TestCustom obj) => obj != null ? obj.Value : (short) 0;

        public static explicit operator TestCustom(short input) => GetValue(input);

        public override bool Equals(object obj)
        {
            if (obj is TestCustom other)
            {
                return other.Value == this.Value;
            }

            return false;
        }
        public static bool operator ==(TestCustom obj1, TestCustom obj2)
        {
            if (ReferenceEquals(obj1, obj2))
            {
                return true;
            }
            if (ReferenceEquals(obj1, null))
            {
                return false;
            }
            if (ReferenceEquals(obj2, null))
            {
                return false;
            }

            return obj1.Equals(obj2);
        }

        public static bool operator !=(TestCustom obj1, TestCustom obj2) => !(obj1 == obj2);

        public static bool operator ==(short obj1, TestCustom obj2)
        {
            if (ReferenceEquals(obj2, null))
            {
                return false;
            }

            return obj1 == obj2.Value;
        }

        public static bool operator !=(short obj1, TestCustom obj2) => !(obj1 == obj2);

        public static bool operator ==(TestCustom obj1, short obj2) => obj2 == obj1;

        public static bool operator !=(TestCustom obj1, short obj2) => !(obj1 == obj2);

        public override int GetHashCode() => base.GetHashCode();

        public static TestCustom GetValue(short input)
        {
            switch(input)
            {
                case var value when value == Test1.Value:
                return Test1;
                case var value when value == Test2.Value:
                return Test2;
                default: throw new ArgumentOutOfRangeException(input.ToString());
            }
        }
    }

    [Serializable]
    public class CustomCommStatus : GenericEnumType<short>
    {
        public static readonly CustomCommStatus ProcessingError = new CustomCommStatus(-2, "ProcessingError");
        public static readonly CustomCommStatus ValidationError = new CustomCommStatus(-1, "ValidationError");
        public static readonly CustomCommStatus New = new CustomCommStatus(0, "New");
        public static readonly CustomCommStatus BeingProcessed = new CustomCommStatus(1, "BeingProcessed");
        public static readonly CustomCommStatus Processed = new CustomCommStatus(2, "Processed");

        protected CustomCommStatus(short value, string name) : base(value, name)
        {
        }

        public override string ToString() => $"CustomCommStatus({Name})";
        public override TypeCode GetTypeCode() => TypeCode.Int16;
        public override short ToInt16(IFormatProvider provider) => this.Value;

        public static implicit operator short(CustomCommStatus obj) => obj != null ? obj.Value : (short) 0;

        public static explicit operator CustomCommStatus(short input) => GetValue(input);

        public override bool Equals(object obj)
        {
            if (obj is CustomCommStatus other)
            {
                return other.Value == this.Value;
            }

            return false;
        }
        public static bool operator ==(CustomCommStatus obj1, CustomCommStatus obj2)
        {
            if (ReferenceEquals(obj1, obj2))
            {
                return true;
            }
            if (ReferenceEquals(obj1, null))
            {
                return false;
            }
            if (ReferenceEquals(obj2, null))
            {
                return false;
            }

            return obj1.Equals(obj2);
        }

        public static bool operator !=(CustomCommStatus obj1, CustomCommStatus obj2) => !(obj1 == obj2);

        public static bool operator ==(short obj1, CustomCommStatus obj2)
        {
            if (ReferenceEquals(obj2, null))
            {
                return false;
            }

            return obj1 == obj2.Value;
        }

        public static bool operator !=(short obj1, CustomCommStatus obj2) => !(obj1 == obj2);

        public static bool operator ==(CustomCommStatus obj1, short obj2) => obj2 == obj1;

        public static bool operator !=(CustomCommStatus obj1, short obj2) => !(obj1 == obj2);

        public override int GetHashCode() => base.GetHashCode();

        public static CustomCommStatus GetValue(short input)
        {
            switch(input)
            {
                case var value when value == ProcessingError.Value:
                return ProcessingError;
                case var value when value == ValidationError.Value:
                return ValidationError;
                case var value when value == New.Value:
                return New;
                case var value when value == BeingProcessed.Value:
                return BeingProcessed;
                case var value when value == Processed.Value:
                return Processed;
                default: throw new ArgumentOutOfRangeException(input.ToString());
            }
        }
    }

    [Serializable]
    public class CustomChargeType : ChargeType
    {
        public static readonly ChargeType TestCustom = GetInstance(999, "TestCustom");

        internal static void Init() => GetCustom = GetCustomValue;

        protected CustomChargeType(short value, string name) : base(value, name)
        {
        }

        public static ChargeType GetCustomValue(short input)
        {
            switch(input)
            {
                case var value when value == TestCustom.Value:
                return TestCustom;
                default: throw new ArgumentOutOfRangeException();
            }
        }
    }

    [Serializable]
    public class CustomTrackingArea : TrackingArea
    {
        public static readonly TrackingArea DSC_AREA = GetInstance(3300000, "DSC_AREA");
        public static readonly TrackingArea CHG_AREA_1 = GetInstance(3400000, "CHG_AREA_1");
        public static readonly TrackingArea FCE_ENTRY_RT_AREA = GetInstance(3450000, "FCE_ENTRY_RT_AREA");
        public static readonly TrackingArea FCE_AREA_1 = GetInstance(3500000, "FCE_AREA_1");
        public static readonly TrackingArea FCE_EXIT_AREA = GetInstance(3550000, "FCE_EXIT_AREA");
        public static readonly TrackingArea TBT_AREA = GetInstance(3600000, "TBT_AREA");
        public static readonly TrackingArea REV_AREA = GetInstance(6400000, "REV_AREA");
        public static readonly TrackingArea REV_EXIT_AREA = GetInstance(6450000, "REV_EXIT_AREA");
        public static readonly TrackingArea CM_AREA = GetInstance(6500000, "CM_AREA");
        public static readonly TrackingArea BTRT_AREA = GetInstance(6600000, "BTRT_AREA");
        public static readonly TrackingArea HOT_SAW_2 = GetInstance(8200000, "HOT_SAW_2");
        public static readonly TrackingArea HOT_SAW_3 = GetInstance(8230000, "HOT_SAW_3");
        public static readonly TrackingArea HOT_SAW_3A = GetInstance(8240000, "HOT_SAW_3A");
        public static readonly TrackingArea SLOW_COOL_AREA = GetInstance(8300000, "SLOW_COOL_AREA");
        public static readonly TrackingArea CB1_ENTRY_RT = GetInstance(8340000, "CB1_ENTRY_RT");
        public static readonly TrackingArea COOL_AREA_1 = GetInstance(8350000, "COOL_AREA_1");
        public static readonly TrackingArea CB2_ENTRY_RT = GetInstance(8390000, "CB2_ENTRY_RT");
        public static readonly TrackingArea COOL_AREA_2_S1 = GetInstance(8400000, "COOL_AREA_2_S1");
        public static readonly TrackingArea COOL_AREA_2_S2 = GetInstance(8410000, "COOL_AREA_2_S2");
        public static readonly TrackingArea CB3_ENTRY_RT = GetInstance(8440000, "CB3_ENTRY_RT");
        public static readonly TrackingArea COOL_AREA_3_S1 = GetInstance(8450000, "COOL_AREA_3_S1");
        public static readonly TrackingArea COOL_AREA_3_S2 = GetInstance(8460000, "COOL_AREA_3_S2");
        public static readonly TrackingArea CB2_EXIT_RT = GetInstance(8470000, "CB2_EXIT_RT");
        public static readonly TrackingArea CB3_EXIT_RT = GetInstance(8471000, "CB3_EXIT_RT");
        public static readonly TrackingArea DIS_AREA_2 = GetInstance(8500000, "DIS_AREA_2");
        public static readonly TrackingArea DIS_AREA_3 = GetInstance(8550000, "DIS_AREA_3");
        public static readonly TrackingArea A_SAW_ENTRY_AREA = GetInstance(8600000, "A_SAW_ENTRY_AREA");
        public static readonly TrackingArea A_SAW_ENTRY1 = GetInstance(8620000, "A_SAW_ENTRY1");
        public static readonly TrackingArea A_SAW_ENTRY_2 = GetInstance(8630000, "A_SAW_ENTRY_2");
        public static readonly TrackingArea A_SAW_EXIT_AREA = GetInstance(8650000, "A_SAW_EXIT_AREA");
        public static readonly TrackingArea BUND_AREA_1 = GetInstance(8700000, "BUND_AREA_1");
        public static readonly TrackingArea BUND_AREA_2 = GetInstance(8750000, "BUND_AREA_2");

        internal static void Init() => GetCustom = GetCustomValue;

        protected CustomTrackingArea(int value, string name) : base(value, name)
        {
        }

        public static TrackingArea GetCustomValue(int input)
        {
            switch(input)
            {
                case var value when value == DSC_AREA.Value:
                return DSC_AREA;
                case var value when value == CHG_AREA_1.Value:
                return CHG_AREA_1;
                case var value when value == FCE_ENTRY_RT_AREA.Value:
                return FCE_ENTRY_RT_AREA;
                case var value when value == FCE_AREA_1.Value:
                return FCE_AREA_1;
                case var value when value == FCE_EXIT_AREA.Value:
                return FCE_EXIT_AREA;
                case var value when value == TBT_AREA.Value:
                return TBT_AREA;
                case var value when value == REV_AREA.Value:
                return REV_AREA;
                case var value when value == REV_EXIT_AREA.Value:
                return REV_EXIT_AREA;
                case var value when value == CM_AREA.Value:
                return CM_AREA;
                case var value when value == BTRT_AREA.Value:
                return BTRT_AREA;
                case var value when value == HOT_SAW_2.Value:
                return HOT_SAW_2;
                case var value when value == HOT_SAW_3.Value:
                return HOT_SAW_3;
                case var value when value == HOT_SAW_3A.Value:
                return HOT_SAW_3A;
                case var value when value == SLOW_COOL_AREA.Value:
                return SLOW_COOL_AREA;
                case var value when value == CB1_ENTRY_RT.Value:
                return CB1_ENTRY_RT;
                case var value when value == COOL_AREA_1.Value:
                return COOL_AREA_1;
                case var value when value == CB2_ENTRY_RT.Value:
                return CB2_ENTRY_RT;
                case var value when value == COOL_AREA_2_S1.Value:
                return COOL_AREA_2_S1;
                case var value when value == COOL_AREA_2_S2.Value:
                return COOL_AREA_2_S2;
                case var value when value == CB3_ENTRY_RT.Value:
                return CB3_ENTRY_RT;
                case var value when value == COOL_AREA_3_S1.Value:
                return COOL_AREA_3_S1;
                case var value when value == COOL_AREA_3_S2.Value:
                return COOL_AREA_3_S2;
                case var value when value == CB2_EXIT_RT.Value:
                return CB2_EXIT_RT;
                case var value when value == CB3_EXIT_RT.Value:
                return CB3_EXIT_RT;
                case var value when value == DIS_AREA_2.Value:
                return DIS_AREA_2;
                case var value when value == DIS_AREA_3.Value:
                return DIS_AREA_3;
                case var value when value == A_SAW_ENTRY_AREA.Value:
                return A_SAW_ENTRY_AREA;
                case var value when value == A_SAW_ENTRY1.Value:
                return A_SAW_ENTRY1;
                case var value when value == A_SAW_ENTRY_2.Value:
                return A_SAW_ENTRY_2;
                case var value when value == A_SAW_EXIT_AREA.Value:
                return A_SAW_EXIT_AREA;
                case var value when value == BUND_AREA_1.Value:
                return BUND_AREA_1;
                case var value when value == BUND_AREA_2.Value:
                return BUND_AREA_2;
                default: throw new ArgumentOutOfRangeException();
            }
        }
    }

    public class EnumInitializator
    {
        public static void Init()
        {
            CustomChargeType.Init();
            CustomTrackingArea.Init();
        }
    }
}
